name: Auto Label

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened, synchronize]

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Auto-label issues and PRs
        uses: actions/labeler@v5
        with:
          configuration-path: .github/labeler.yml
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Label PR based on size
        if: github.event_name == 'pull_request'
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/xs'
          xs_max_size: 10
          s_label: 'size/s'
          s_max_size: 100
          m_label: 'size/m'
          m_max_size: 500
          l_label: 'size/l'
          l_max_size: 1000
          xl_label: 'size/xl'
          message_if_xl: 'This PR is very large. Consider breaking it into smaller PRs.'

      - name: Label frontend changes
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const labels = [];
            
            if (files.some(f => f.filename.startsWith('frontend/'))) {
              labels.push('frontend');
            }
            if (files.some(f => f.filename.startsWith('backend/'))) {
              labels.push('backend');
            }
            if (files.some(f => f.filename.startsWith('api_gateway/'))) {
              labels.push('api-gateway');
            }
            if (files.some(f => f.filename.startsWith('image-generation-service/'))) {
              labels.push('image-generation');
            }
            if (files.some(f => f.filename.startsWith('rag_model_service/'))) {
              labels.push('rag-model');
            }
            if (files.some(f => f.filename.startsWith('.github/'))) {
              labels.push('github-actions');
            }
            if (files.some(f => f.filename.includes('docker') || f.filename === 'docker-compose.yml')) {
              labels.push('docker');
            }
            if (files.some(f => f.filename.endsWith('.md'))) {
              labels.push('documentation');
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }