name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Frontend tests and linting
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint || true  # Continue on linting errors for now

      - name: Run tests
        run: npm test -- --coverage || true  # Continue on test failures for now

      - name: Build frontend
        run: npm run build

  # Backend tests and linting
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    strategy:
      matrix:
        python-version: ['3.11']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black pytest pytest-cov

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format check with black
        run: black --check --diff .

      - name: Test with pytest
        run: |
          pytest --cov=src --cov-report=xml || true  # Continue on test failures for now

  # Image Generation Service CI
  image-generation-ci:
    name: Image Generation Service CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./image-generation-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black pytest

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format check with black
        run: black --check --diff .

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: false
          tags: ai-business-app-backend:test

      - name: Build frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: false
          tags: ai-business-app-frontend:test

      - name: Build API Gateway Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api_gateway
          push: false
          tags: ai-business-app-api-gateway:test

      - name: Build Image Generation Service Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./image-generation-service
          push: false
          tags: ai-business-app-image-generation:test

  # Integration test with docker-compose
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci, docker-build]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create minimal environment file
        run: |
          cat > .env << EOF
          # Minimal configuration for testing
          FLASK_ENV=development
          DATABASE_URL=sqlite:///test.db
          SECRET_KEY=test-secret-key
          EOF

      - name: Run docker-compose health check
        run: |
          docker-compose config
          # Optionally run a quick health check
          # docker-compose up -d
          # sleep 30
          # docker-compose ps
          # docker-compose down